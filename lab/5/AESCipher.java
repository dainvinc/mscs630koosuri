/**
 * file: AESCipher.java
 * author: Vishal Koosuri
 * course: MSCS 630
 * lab: 5
 * version: 1.0
 *due date: May 9
 *
 *This file accepts input from the
 * DriverAES.java and implements
 * AES Encryption
 */
public class AESCipher {
  //public static String[] roundKeys = new String[11];
  
  private static int aesSBoxNew(int col){
    int[] sbox = {
      0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
      0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
      0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
      0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
      0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
      0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
      0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
      0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
      0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
      0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
      0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
      0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
      0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
      0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
      0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
      0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
    };
    col = sbox[col];
    return col;
  }
  
  private static int aesMultby2(int col){
    int[] sbox = {
      0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
      0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
      0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
      0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,
      0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
      0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
      0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
      0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
      0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
      0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
      0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
      0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
      0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
      0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
      0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
      0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
    };
    col = sbox[col];
    return col;
  }
  
  private static int aesMultby3(int col){
    int[] sbox = {
      0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
      0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
      0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
      0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
      0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
      0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
      0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
      0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,
      0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
      0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
      0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,
      0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,
      0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
      0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,
      0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
      0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
    };
    col = sbox[col];
    return col;
  }
  
  private static int aesRcon(int round){
    int[] rcon = {
      0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
      0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
      0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
      0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
      0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
      0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
      0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
      0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
      0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
      0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
      0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
      0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
      0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
      0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
      0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb};
    return rcon[round];
  }
  
  private static int[] aesSBox(int[] col){
    int[] sbox = {
        0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
        0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
        0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
        0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
        0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
        0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
        0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
        0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
        0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
        0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
        0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
        0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
        0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
        0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
        0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
        0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16};
    for(int i = 0; i < col.length; i++){
      col[i] = sbox[col[i]];
    }
    return col;
  }
  
  public static int[][] AESStateXOR(String sHex, String keyHex) {
    int[][] key1Mat = new int[4][4];
    int[][] key2Mat = new int[4][4];
    int[][] keyMat = new int[4][4];
    key1Mat = convertKeyToMat(sHex);
    key2Mat = convertKeyToMat(keyHex);
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        keyMat[i][j] = key1Mat[i][j] ^ key2Mat[i][j];  
      }
    }
    System.out.println("AES XOR");
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        System.out.print(convertToHex(keyMat[i][j]) +" ");
      }
      System.out.println();
    }
    return keyMat;
  }
  
  public static int[][] AESNibbleSub(int[][] inStateHex) {
    int[] currentCol = new int[4];
    int[][] nibSubMat = new int[4][4];
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        nibSubMat[i][j] = aesSBoxNew(inStateHex[i][j]);
      }
    }
    System.out.println("AES NIB SUB");
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        System.out.print(convertToHex(nibSubMat[i][j]) +" ");
      }
      System.out.println();
    }
    AESShiftRow(nibSubMat);
    return nibSubMat;
  }
  
  public static int[][] AESShiftRow(int[][] inStateHex) {
    int[][] shiftMat = new int[4][4];
    int temp = 0;
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        shiftMat[i][j] = inStateHex[i][j];
        if(i > 0) {
          try {
            shiftMat[i][j] = inStateHex[i][(j+i)%4];
          } catch(ArrayIndexOutOfBoundsException a) {
            shiftMat[i][j] = temp;
          }
        }
      }
    }
    System.out.println("AES Shift Row");
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        System.out.print(convertToHex(shiftMat[i][j]) +" ");
      }
      System.out.println();
    }
    return shiftMat;
  }
  
  public static int[][] AESMixColumn(int[][] inStateHex) {
    int[][] mixColMat = new int[4][4];
    int[] colMat = new int[4];
    for(int c=0; c<4; c++) {
      for(int i=0; i<4; i++) {
        colMat[i] = inStateHex[i][c];
      }
      mixColMat[0][c] = aesMultby2(colMat[0]) ^ aesMultby3(colMat[1]) ^ colMat[2] ^ colMat[3];
      mixColMat[1][c] = colMat[0] ^ aesMultby2(colMat[1]) ^ aesMultby3(colMat[2]) ^ colMat[3];
      mixColMat[2][c] = colMat[0] ^ colMat[1] ^ aesMultby2(colMat[2]) ^ aesMultby3(colMat[3]);
      mixColMat[3][c] = aesMultby3(colMat[0]) ^ colMat[1] ^ colMat[2] ^ aesMultby2(colMat[3]);
    }
    System.out.println("AES Mix Col");
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        System.out.print(convertToHex(mixColMat[i][j]) +" ");
      }
      System.out.println();
    }
    return mixColMat;
  }
  
  public static int[][] AES(String pTextHex, String keyHex) {
    int[] cTextHex;
    String[] roundKeys = aesRoundKeys(keyHex);
    System.out.println("Round 0");
    int[][] cTextMat = AESStateXOR(pTextHex, keyHex);
    int[][] finalAes = new int[4][4];
    for(int i=1; i<11; i++) {
      if(i != 10) {
        System.out.println("ROUND " +i);
        cTextMat = AESNibbleSub(cTextMat);
        cTextMat = AESShiftRow(cTextMat);
        cTextMat = AESMixColumn(cTextMat);
        for(int k=0; k<4; k++) {
          for(int q=0; q<4; q++) {
            System.out.print(cTextMat[k][q] +" ");
          }
          System.out.println();
        }
        cTextMat = AESStateXOR(cTextMat, roundKeys[i]);
      }
    }
    cTextMat = AESNibbleSub(cTextMat);
    cTextMat = AESShiftRow(cTextMat);
    cTextMat = AESStateXOR(cTextMat, roundKeys[10]);
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        System.out.print(convertToHex(cTextMat[j][i]).toUpperCase());
      }
    }
    return cTextMat;
  }
  
  public static int[][] AESStateXOR(int[][] sHex, String keyHex){
    int[][] keyMat = new int[4][4];
    int[][] key1Mat = new int[4][4];
    key1Mat = convertKeyToMat(keyHex);
    for (int i=0; i<4; i++) {
      for (int j=0; j<4; j++) {
        keyMat[i][j] = sHex[i][j] ^ key1Mat[i][j];
      }
    }
    return keyMat;
  }
  
  public static String convertToText(int[][] anyMat) {
    String newMat = "";
    for(int i=0; i<4; i++) {
      for(int j=0; j<4; j++) {
        newMat = newMat + Integer.toString(anyMat[i][j]);
      }
    }
    return newMat;
  }
  
  public static String convertToHex(int number) {
    return Integer.toHexString(number);
  }
  
  public static int[][] convertKeyToMat(String key) {
    int[][] inputMat = new int[4][4];
    String rand;
    int row = 0;
    int col = 0;
    int begin = 0;
    int end = 2;
    for (row = 0; row < 4; row++) {
      for (col = 0; col < 4; col++) {
        inputMat[col][row] = Integer.parseInt(key.substring(begin, end), 16);
        begin += 2;
        end += 2;
      }
    }
    return inputMat;
  }
  
  public static String[] aesRoundKeys(String keyHex){
    int[][] keyHexMat = new int[4][4];
    String[] roundKeys = new String[11];
    roundKeys[0] = keyHex;
    for(int round = 1; round < 11; round++) {
      String keyHexString = "";
      int begin = 0;
      int end = 2;
      for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
          keyHexMat[j][i] = Integer.parseInt(keyHex.substring(begin, end), 16);
          begin += 2;
          end += 2;
        }
      }
      int[] currentCol = new int[4];
      for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
          currentCol[j] = keyHexMat[j][3];
        }
      }

      for (int subRound = 1; subRound <= 4; subRound++) {
        int[] colMat = new int[4];
        for (int i=0; i<4; i++) {
          for (int j=0; j<4; j++) {
            colMat[j] = keyHexMat[j][subRound - 1];
          }
        }

        if (subRound == 1) {
          int first = currentCol[0];
          for (int i = 1; i < currentCol.length; i++) {
            currentCol[i - 1] = currentCol[i];
          }
          currentCol[currentCol.length - 1] = first;
          currentCol = aesSBox(currentCol);
          currentCol[0] = currentCol[0] ^ aesRcon(round);

          for (int i = 0; i < currentCol.length; i++) {
            currentCol[i] = currentCol[i] ^ colMat[i];
            keyHexString += String.format("%02x", currentCol[i]);
          }
        } else {
          for (int i = 0; i < currentCol.length; i++) {
            currentCol[i] = currentCol[i] ^ colMat[i];
            keyHexString += String.format("%02x", currentCol[i]).toUpperCase();
          }
          keyHex = keyHexString;
        }
      }
      roundKeys[round] = keyHexString.toUpperCase();
    }
    return roundKeys;
  }
}